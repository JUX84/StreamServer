// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Server_h__
#define __Server_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Player
{

class Server;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Player::Server>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Player::Server*);

}

}

namespace Player
{

class Server;
bool operator==(const Server&, const Server&);
bool operator<(const Server&, const Server&);
::Ice::Object* upCast(::Player::Server*);
typedef ::IceInternal::Handle< ::Player::Server> ServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Player::Server> ServerPrx;
void __patch(ServerPtr&, const ::Ice::ObjectPtr&);

}

namespace Player
{

struct Song
{
    ::std::string artist;
    ::std::string title;
    ::std::string path;

    bool operator==(const Song& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(artist != __rhs.artist)
        {
            return false;
        }
        if(title != __rhs.title)
        {
            return false;
        }
        if(path != __rhs.path)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Song& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(artist < __rhs.artist)
        {
            return true;
        }
        else if(__rhs.artist < artist)
        {
            return false;
        }
        if(title < __rhs.title)
        {
            return true;
        }
        else if(__rhs.title < title)
        {
            return false;
        }
        if(path < __rhs.path)
        {
            return true;
        }
        else if(__rhs.path < path)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Song& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Song& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Song& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Song& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Player::Song> SongSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Player::Song>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Player::Song, S>
{
    static void write(S* __os, const ::Player::Song& v)
    {
        __os->write(v.artist);
        __os->write(v.title);
        __os->write(v.path);
    }
};

template<class S>
struct StreamReader< ::Player::Song, S>
{
    static void read(S* __is, ::Player::Song& v)
    {
        __is->read(v.artist);
        __is->read(v.title);
        __is->read(v.path);
    }
};

}

namespace Player
{

class Callback_Server_selectSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_selectSong_Base> Callback_Server_selectSongPtr;

class Callback_Server_playSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_playSong_Base> Callback_Server_playSongPtr;

class Callback_Server_stopSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_stopSong_Base> Callback_Server_stopSongPtr;

class Callback_Server_addSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_addSong_Base> Callback_Server_addSongPtr;

class Callback_Server_removeSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_removeSong_Base> Callback_Server_removeSongPtr;

class Callback_Server_searchSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_searchSong_Base> Callback_Server_searchSongPtr;

}

namespace IceProxy
{

namespace Player
{

class Server : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string selectSong(const ::Player::Song& s)
    {
        return selectSong(s, 0);
    }
    ::std::string selectSong(const ::Player::Song& s, const ::Ice::Context& __ctx)
    {
        return selectSong(s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_selectSong(const ::Player::Song& s, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_selectSong(s, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_selectSong(const ::Player::Song& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_selectSong(s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_selectSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_selectSong(s, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_selectSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_selectSong(s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_selectSong(const ::Player::Song& s, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Player::ServerPrx __proxy = ::Player::ServerPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_selectSong(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_selectSong(s, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song& s)
    {
        return begin_selectSong(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song& s, const ::Ice::Context& __ctx)
    {
        return begin_selectSong(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectSong(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectSong(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song& s, const ::Player::Callback_Server_selectSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectSong(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::Player::Callback_Server_selectSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectSong(s, &__ctx, __del, __cookie);
    }

    ::std::string end_selectSong(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string selectSong(const ::Player::Song&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_selectSong(const ::Player::Song&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void playSong(const ::std::string& token)
    {
        playSong(token, 0);
    }
    void playSong(const ::std::string& token, const ::Ice::Context& __ctx)
    {
        playSong(token, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_playSong(const ::std::string& token, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_playSong(token, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_playSong(const ::std::string& token, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_playSong(token, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_playSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_playSong(token, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_playSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_playSong(token, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_playSong(const ::std::string& token)
    {
        return begin_playSong(token, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playSong(const ::std::string& token, const ::Ice::Context& __ctx)
    {
        return begin_playSong(token, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playSong(const ::std::string& token, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(token, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSong(const ::std::string& token, const ::Player::Callback_Server_playSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::Player::Callback_Server_playSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(token, &__ctx, __del, __cookie);
    }

    void end_playSong(const ::Ice::AsyncResultPtr&);
    
private:

    void playSong(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_playSong(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopSong(const ::std::string& token)
    {
        stopSong(token, 0);
    }
    void stopSong(const ::std::string& token, const ::Ice::Context& __ctx)
    {
        stopSong(token, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopSong(const ::std::string& token, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopSong(token, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stopSong(const ::std::string& token, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopSong(token, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopSong(token, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopSong(token, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string& token)
    {
        return begin_stopSong(token, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string& token, const ::Ice::Context& __ctx)
    {
        return begin_stopSong(token, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string& token, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSong(token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSong(token, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string& token, const ::Player::Callback_Server_stopSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSong(token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string& token, const ::Ice::Context& __ctx, const ::Player::Callback_Server_stopSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSong(token, &__ctx, __del, __cookie);
    }

    void end_stopSong(const ::Ice::AsyncResultPtr&);
    
private:

    void stopSong(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopSong(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addSong(const ::Player::Song& s)
    {
        addSong(s, 0);
    }
    void addSong(const ::Player::Song& s, const ::Ice::Context& __ctx)
    {
        addSong(s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addSong(const ::Player::Song& s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addSong(s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addSong(const ::Player::Song& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addSong(s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addSong(s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addSong(s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song& s)
    {
        return begin_addSong(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song& s, const ::Ice::Context& __ctx)
    {
        return begin_addSong(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSong(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSong(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song& s, const ::Player::Callback_Server_addSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSong(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::Player::Callback_Server_addSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSong(s, &__ctx, __del, __cookie);
    }

    void end_addSong(const ::Ice::AsyncResultPtr&);
    
private:

    void addSong(const ::Player::Song&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addSong(const ::Player::Song&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeSong(const ::Player::Song& s)
    {
        removeSong(s, 0);
    }
    void removeSong(const ::Player::Song& s, const ::Ice::Context& __ctx)
    {
        removeSong(s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeSong(const ::Player::Song& s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeSong(s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeSong(const ::Player::Song& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeSong(s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeSong(s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeSong(s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song& s)
    {
        return begin_removeSong(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song& s, const ::Ice::Context& __ctx)
    {
        return begin_removeSong(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSong(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSong(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song& s, const ::Player::Callback_Server_removeSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSong(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song& s, const ::Ice::Context& __ctx, const ::Player::Callback_Server_removeSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSong(s, &__ctx, __del, __cookie);
    }

    void end_removeSong(const ::Ice::AsyncResultPtr&);
    
private:

    void removeSong(const ::Player::Song&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeSong(const ::Player::Song&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Player::SongSeq searchSong(const ::std::string& artist, const ::std::string& title)
    {
        return searchSong(artist, title, 0);
    }
    ::Player::SongSeq searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context& __ctx)
    {
        return searchSong(artist, title, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::IceInternal::Function<void (const ::Player::SongSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchSong(artist, title, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchSong(artist, title, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Player::SongSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchSong(artist, title, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchSong(artist, title, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Player::SongSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Player::SongSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Player::ServerPrx __proxy = ::Player::ServerPrx::uncheckedCast(__result->getProxy());
                ::Player::SongSeq __ret;
                try
                {
                    __ret = __proxy->end_searchSong(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Player::SongSeq&)> _response;
        };
        return begin_searchSong(artist, title, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string& artist, const ::std::string& title)
    {
        return begin_searchSong(artist, title, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context& __ctx)
    {
        return begin_searchSong(artist, title, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchSong(artist, title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchSong(artist, title, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Player::Callback_Server_searchSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchSong(artist, title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string& artist, const ::std::string& title, const ::Ice::Context& __ctx, const ::Player::Callback_Server_searchSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchSong(artist, title, &__ctx, __del, __cookie);
    }

    ::Player::SongSeq end_searchSong(const ::Ice::AsyncResultPtr&);
    
private:

    ::Player::SongSeq searchSong(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchSong(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Server> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_secure(bool __secure) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_twoway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_oneway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_batchOneway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_datagram() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_batchDatagram() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_compress(bool __compress) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Player
{

class Server : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string selectSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void playSong(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stopSong(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Player::SongSeq searchSong(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Player
{

class Server : virtual public ::IceDelegate::Player::Server,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string selectSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void playSong(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stopSong(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Player::SongSeq searchSong(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Player
{

class Server : virtual public ::IceDelegate::Player::Server,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string selectSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void playSong(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stopSong(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeSong(const ::Player::Song&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Player::SongSeq searchSong(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Player
{

class Server : virtual public ::Ice::Object
{
public:

    typedef ServerPrx ProxyType;
    typedef ServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string selectSong(const ::Player::Song&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___selectSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void playSong(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___playSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopSong(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addSong(const ::Player::Song&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeSong(const ::Player::Song&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Player::SongSeq searchSong(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Server& l, const Server& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Server& l, const Server& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Player
{

template<class T>
class CallbackNC_Server_selectSong : public Callback_Server_selectSong_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Server_selectSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Player::ServerPrx __proxy = ::Player::ServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_selectSong(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Server_selectSongPtr
newCallback_Server_selectSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_selectSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_selectSongPtr
newCallback_Server_selectSong(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_selectSong<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_selectSong : public Callback_Server_selectSong_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Server_selectSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Player::ServerPrx __proxy = ::Player::ServerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_selectSong(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_selectSongPtr
newCallback_Server_selectSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_selectSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_selectSongPtr
newCallback_Server_selectSong(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_selectSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_playSong : public Callback_Server_playSong_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_playSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_playSongPtr
newCallback_Server_playSong(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_playSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_playSongPtr
newCallback_Server_playSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_playSong<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_playSongPtr
newCallback_Server_playSong(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_playSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_playSongPtr
newCallback_Server_playSong(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_playSong<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_playSong : public Callback_Server_playSong_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_playSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_playSongPtr
newCallback_Server_playSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_playSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_playSongPtr
newCallback_Server_playSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_playSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_playSongPtr
newCallback_Server_playSong(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_playSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_playSongPtr
newCallback_Server_playSong(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_playSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_stopSong : public Callback_Server_stopSong_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_stopSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_stopSongPtr
newCallback_Server_stopSong(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stopSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_stopSongPtr
newCallback_Server_stopSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stopSong<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_stopSongPtr
newCallback_Server_stopSong(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stopSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_stopSongPtr
newCallback_Server_stopSong(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stopSong<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_stopSong : public Callback_Server_stopSong_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_stopSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_stopSongPtr
newCallback_Server_stopSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stopSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_stopSongPtr
newCallback_Server_stopSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stopSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_stopSongPtr
newCallback_Server_stopSong(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stopSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_stopSongPtr
newCallback_Server_stopSong(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stopSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_addSong : public Callback_Server_addSong_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_addSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_addSongPtr
newCallback_Server_addSong(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_addSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_addSongPtr
newCallback_Server_addSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_addSong<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_addSongPtr
newCallback_Server_addSong(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_addSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_addSongPtr
newCallback_Server_addSong(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_addSong<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_addSong : public Callback_Server_addSong_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_addSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_addSongPtr
newCallback_Server_addSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_addSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_addSongPtr
newCallback_Server_addSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_addSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_addSongPtr
newCallback_Server_addSong(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_addSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_addSongPtr
newCallback_Server_addSong(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_addSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_removeSong : public Callback_Server_removeSong_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_removeSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_removeSongPtr
newCallback_Server_removeSong(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_removeSongPtr
newCallback_Server_removeSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeSong<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_removeSongPtr
newCallback_Server_removeSong(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_removeSongPtr
newCallback_Server_removeSong(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeSong<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_removeSong : public Callback_Server_removeSong_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_removeSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_removeSongPtr
newCallback_Server_removeSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_removeSongPtr
newCallback_Server_removeSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_removeSongPtr
newCallback_Server_removeSong(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_removeSongPtr
newCallback_Server_removeSong(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_searchSong : public Callback_Server_searchSong_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Player::SongSeq&);

    CallbackNC_Server_searchSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Player::ServerPrx __proxy = ::Player::ServerPrx::uncheckedCast(__result->getProxy());
        ::Player::SongSeq __ret;
        try
        {
            __ret = __proxy->end_searchSong(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Server_searchSongPtr
newCallback_Server_searchSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Player::SongSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_searchSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_searchSongPtr
newCallback_Server_searchSong(T* instance, void (T::*cb)(const ::Player::SongSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_searchSong<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_searchSong : public Callback_Server_searchSong_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Player::SongSeq&, const CT&);

    Callback_Server_searchSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Player::ServerPrx __proxy = ::Player::ServerPrx::uncheckedCast(__result->getProxy());
        ::Player::SongSeq __ret;
        try
        {
            __ret = __proxy->end_searchSong(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_searchSongPtr
newCallback_Server_searchSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Player::SongSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_searchSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_searchSongPtr
newCallback_Server_searchSong(T* instance, void (T::*cb)(const ::Player::SongSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_searchSong<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
